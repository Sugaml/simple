// Code generated by MockGen. DO NOT EDIT.
// Source: internal/models/store.go

// Package mockdb is a generated GoMock package.
package mockdb

import (
	models "01cloud-payment/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStore) Create(data models.PaymentSetting) (models.PaymentSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", data)
	ret0, _ := ret[0].(models.PaymentSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockStoreMockRecorder) Create(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStore)(nil).Create), data)
}

// CreateInvoice mocks base method.
func (m *MockStore) CreateInvoice(invoice models.Invoice) (models.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoice", invoice)
	ret0, _ := ret[0].(models.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvoice indicates an expected call of CreateInvoice.
func (mr *MockStoreMockRecorder) CreateInvoice(invoice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoice", reflect.TypeOf((*MockStore)(nil).CreateInvoice), invoice)
}

// Delete mocks base method.
func (m *MockStore) Delete(pid uint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", pid)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockStoreMockRecorder) Delete(pid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStore)(nil).Delete), pid)
}

// FindAll mocks base method.
func (m *MockStore) FindAll() ([]models.PaymentSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]models.PaymentSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockStoreMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockStore)(nil).FindAll))
}

// FindById mocks base method.
func (m *MockStore) FindById(uid uint) (models.PaymentSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", uid)
	ret0, _ := ret[0].(models.PaymentSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockStoreMockRecorder) FindById(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockStore)(nil).FindById), uid)
}

// MigrateDB mocks base method.
func (m *MockStore) MigrateDB() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MigrateDB")
}

// MigrateDB indicates an expected call of MigrateDB.
func (mr *MockStoreMockRecorder) MigrateDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateDB", reflect.TypeOf((*MockStore)(nil).MigrateDB))
}

// Update mocks base method.
func (m *MockStore) Update(data models.PaymentSetting) (models.PaymentSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", data)
	ret0, _ := ret[0].(models.PaymentSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockStoreMockRecorder) Update(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStore)(nil).Update), data)
}
